# Generated by Django 3.2.5 on 2021-11-16 03:33

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import utility.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('utility', '0001_initial'),
        ('field_site', '0001_initial'),
        ('sample_labels', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FieldSurvey',
            fields=[
                ('survey_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('survey_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Survey DateTime')),
                ('recorder_fname', models.CharField(blank=True, max_length=255, verbose_name='Recorder First Name')),
                ('recorder_lname', models.CharField(blank=True, max_length=255, verbose_name='Recorder Last Name')),
                ('arrival_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Arrival DateTime')),
                ('site_id_other', models.CharField(blank=True, max_length=255, verbose_name='Site ID - Other')),
                ('site_name', models.CharField(blank=True, max_length=255, verbose_name='General Location Name')),
                ('lat_manual', models.DecimalField(decimal_places=16, max_digits=22, verbose_name='Latitude (DD)')),
                ('long_manual', models.DecimalField(decimal_places=16, max_digits=22, verbose_name='Latitude (DD)')),
                ('env_obs_turbidity', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('none', 'None'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=50, verbose_name='Water Turbidity')),
                ('env_obs_precip', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('none', 'None'), ('drizzle', 'Drizzle'), ('light_rain', 'Light rain'), ('mod_rain', 'Moderate rain'), ('heavy_rain', 'Heavy rain'), ('hail', 'Hail'), ('sleet', 'Sleet'), ('light_snow', 'Light snow'), ('mod_snow', 'Moderate snow'), ('heavy_snow', 'Heavy snow')], max_length=50, verbose_name='Precipitation')),
                ('env_obs_wind_speed', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('none', 'None'), ('light_wind', 'Light breeze'), ('mod_wind', 'Moderate breeze'), ('strong_wind', 'Strong wind')], max_length=50, verbose_name='Wind Speed')),
                ('env_obs_cloud_cover', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('none', 'None'), ('partly_cloudy', 'Partly cloudy'), ('full_cloudy', 'Full cloudy')], max_length=50, verbose_name='Cloud Cover')),
                ('env_biome', models.CharField(blank=True, max_length=255, verbose_name='Biome')),
                ('env_biome_other', models.CharField(blank=True, max_length=255, verbose_name='Other Biome')),
                ('env_feature', models.CharField(blank=True, max_length=255, verbose_name='Feature')),
                ('env_feature_other', models.CharField(blank=True, max_length=255, verbose_name='Other Feature')),
                ('env_material', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('water', 'Water'), ('soil', 'Soil'), ('other', 'Other')], max_length=50, verbose_name='Material')),
                ('env_material_other', models.CharField(blank=True, max_length=255, verbose_name='Other Material')),
                ('env_notes', models.TextField(blank=True, verbose_name='Environmental Notes')),
                ('env_measure_mode', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('on_foot', 'On Foot'), ('on_boat', 'Boat')], max_length=50, verbose_name='Collection Mode')),
                ('env_boat_type', models.CharField(blank=True, max_length=255, verbose_name='Boat Type')),
                ('env_bottom_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Bottom Depth (m)')),
                ('measurements_taken', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Measurements Taken')),
                ('survey_complete', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Survey Complete')),
                ('qa_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Quality Check DateTime')),
                ('qa_initial', models.CharField(blank=True, max_length=200, verbose_name='Quality Check Initials')),
                ('gps_cap_lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Latitude (DD)')),
                ('gps_cap_long', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Longitude (DD)')),
                ('gps_cap_alt', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Altitude (m)')),
                ('gps_cap_horacc', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Horizontal Accuracy (m)')),
                ('gps_cap_vertacc', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Vertical Accuracy (m)')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Latitude, Longitude (DD WGS84)')),
                ('core_subcorer', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='core_subcorer', to=settings.AUTH_USER_MODEL, verbose_name='Designated Sub-corer')),
                ('project_ids', models.ManyToManyField(related_name='project_ids', to='utility.Project', verbose_name='Affiliated Project(s)')),
                ('qa_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='qa_editor', to=settings.AUTH_USER_MODEL, verbose_name='Quality Editor')),
                ('record_creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='survey_record_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record Creator')),
                ('record_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='survey_record_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record Editor')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='field_site.fieldsite')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='supervisor', to=settings.AUTH_USER_MODEL, verbose_name='Supervisor')),
                ('username', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='username', to=settings.AUTH_USER_MODEL, verbose_name='Username')),
                ('water_filterer', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='water_filterer', to=settings.AUTH_USER_MODEL, verbose_name='Designated Filterer')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Field Survey',
                'verbose_name_plural': 'Field Surveys',
            },
        ),
        migrations.CreateModel(
            name='FieldCrew',
            fields=[
                ('crew_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('crew_fname', models.CharField(blank=True, max_length=255, verbose_name='Crew First Name')),
                ('crew_lname', models.CharField(blank=True, max_length=255, verbose_name='Crew First Name')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Crew Creation DateTime')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Crew Edit DateTime')),
                ('record_creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='crew_record_creator', to=settings.AUTH_USER_MODEL, verbose_name='Crew Creator')),
                ('record_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='crew_record_editor', to=settings.AUTH_USER_MODEL, verbose_name='Crew Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='field_crew', to='field_survey.fieldsurvey')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Field Crew',
                'verbose_name_plural': 'Field Crew',
            },
        ),
        migrations.CreateModel(
            name='EnvMeasurement',
            fields=[
                ('env_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('env_measure_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Measurement DateTime')),
                ('env_measure_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Measurement Depth (m)')),
                ('env_instrument', models.TextField(blank=True, choices=[(None, '(Unknown)'), ('env_ctd', 'CTD'), ('env_ysi', 'YSI'), ('env_secchi', 'Secchi Disk'), ('env_niskin', 'Niskin'), ('env_inst_other', 'Other')], verbose_name='Instruments Used')),
                ('env_ctd_filename', models.CharField(blank=True, max_length=255, verbose_name='CTD File Name')),
                ('env_ctd_notes', models.TextField(blank=True, verbose_name='CTD Notes')),
                ('env_ysi_filename', models.CharField(blank=True, max_length=255, verbose_name='YSI File Name')),
                ('env_ysi_model', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('exo2', 'EXO2'), ('exo_handheld', 'EXO HANDHELD'), ('prodss', 'ProDSS')], max_length=50, verbose_name='YSI Model')),
                ('env_ysi_sn', models.CharField(blank=True, max_length=255, verbose_name='YSI Serial Number')),
                ('env_ysi_notes', models.TextField(blank=True, verbose_name='YSI Notes')),
                ('env_secchi_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Secchi Depth (m)')),
                ('env_secchi_notes', models.TextField(blank=True, verbose_name='Secchi Notes')),
                ('env_niskin_number', models.IntegerField(blank=True, null=True, verbose_name='Niskin Number')),
                ('env_niskin_notes', models.TextField(blank=True, verbose_name='Niskin Notes')),
                ('env_inst_other', models.TextField(blank=True, verbose_name='Other Instruments')),
                ('env_measurement', models.TextField(blank=True, choices=[(None, '(Unknown)'), ('env_flow', 'Flow'), ('env_water_temp', 'Water Temp'), ('env_salinity', 'Salinity'), ('env_ph', 'pH'), ('env_par1', 'PAR1'), ('env_par2', 'PAR2'), ('env_turbidity', 'Turbidity'), ('env_conductivity', 'Cond'), ('env_do', 'DO'), ('env_pheophytin', 'Pheo'), ('env_chla', 'Chl-a'), ('env_no3no2', 'NO3NO2'), ('env_no2', 'NO2'), ('env_nh4', 'NH4'), ('env_phosphate', 'PO4'), ('env_substrate', 'Substrate'), ('env_labdatetime', 'Lab Date'), ('env_dnotes', 'Notes')], verbose_name='Environmental Measurements')),
                ('env_flow_rate', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Flow Rate (m/s)')),
                ('env_water_temp', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Temperature (C)')),
                ('env_salinity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Salinity (PSU)')),
                ('env_ph_scale', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='pH Scale')),
                ('env_par1', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='PAR1 (Channel 1: Up μmoles/sec/m²)')),
                ('env_par2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='PAR2 (Channel 2: Down μmoles/sec/m²)')),
                ('env_turbidity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Turbidity FNU (Formazin Nephelometric Unit)')),
                ('env_conductivity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Conductivity (μS/cm)')),
                ('env_do', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Dissolved Oxygen (mg/L)')),
                ('env_pheophytin', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Pheophytin (µg/L)')),
                ('env_chla', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Chlorophyll a (µg/L)')),
                ('env_no3no2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Nitrate and Nitrite (µM)')),
                ('env_no2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Nitrite (µM)')),
                ('env_nh4', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Ammonium (µM)')),
                ('env_phosphate', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Phosphate (µM)')),
                ('env_substrate', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('pebble', 'Pebble'), ('cobble', 'Cobble'), ('boulder', 'Boulder'), ('silt', 'Silt'), ('clay', 'Clay'), ('organic', 'Organic')], max_length=50, verbose_name='Bottom Substrate')),
                ('env_lab_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Lab DateTime')),
                ('env_measure_notes', models.TextField(blank=True, verbose_name='Measurement Notes')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Env Creation DateTime')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Env Edit DateTime')),
                ('record_creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='env_record_creator', to=settings.AUTH_USER_MODEL, verbose_name='Env Creator')),
                ('record_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='env_record_editor', to=settings.AUTH_USER_MODEL, verbose_name='Env Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='env_measurements', to='field_survey.fieldsurvey')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Env Measurement',
                'verbose_name_plural': 'Env Measurements',
            },
        ),
        migrations.CreateModel(
            name='FieldCollection',
            fields=[
                ('collection_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('collection_type', models.CharField(choices=[(None, '(Unknown)'), ('water_sample', 'Water Sample'), ('sed_sample', 'Sediment Sample')], max_length=50, verbose_name='Collection Type (water or sediment)')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Collection Creation DateTime')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Collection Edit DateTime')),
                ('record_creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='collection_record_creator', to=settings.AUTH_USER_MODEL, verbose_name='Collection Creator')),
                ('record_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='collection_record_editor', to=settings.AUTH_USER_MODEL, verbose_name='Collection Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='field_collections', to='field_survey.fieldsurvey')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Field Collection',
                'verbose_name_plural': 'Field Collections',
            },
        ),
        migrations.CreateModel(
            name='WaterCollection',
            fields=[
                ('field_collection', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='water_collection', serialize=False, to='field_survey.fieldcollection')),
                ('water_control', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Is Control')),
                ('water_control_type', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('field', 'Field'), ('lab', 'Lab')], max_length=50, verbose_name='Water Control Type')),
                ('water_vessel_label', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Label')),
                ('water_collect_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Water Collection DateTime')),
                ('water_collect_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Collection Depth')),
                ('water_collect_mode', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('hand', 'By Hand'), ('niskin_handtoss', 'By Hand-Tossed Niskin'), ('niskin_array', 'By Array Niskin')],  max_length=50, verbose_name='Collection Mode')),
                ('water_niskin_number', models.IntegerField(blank=True, null=True, verbose_name='Niskin Number')),
                ('water_niskin_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Niskin Sample Volume')),
                ('water_vessel_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Vessel Volume')),
                ('water_vessel_material', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Material')),
                ('water_vessel_color', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Color')),
                ('water_collect_notes', models.TextField(blank=True, verbose_name='Water Sample Notes')),
                ('was_filtered', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Filtered')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Water Collection',
                'verbose_name_plural': 'Water Collections',
            },
        ),
        migrations.CreateModel(
            name='SedimentCollection',
            fields=[
                ('field_collection', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='sediment_collection', serialize=False, to='field_survey.fieldcollection')),
                ('core_control', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Is Control')),
                ('core_label', models.CharField(blank=True, max_length=255, verbose_name='Core Label')),
                ('core_datetime_start', models.DateTimeField(blank=True, null=True, verbose_name='Core Start DateTime')),
                ('core_datetime_end', models.DateTimeField(blank=True, null=True, verbose_name='Core End DateTime')),
                ('core_method', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('gravity', 'Gravity'), ('piston', 'Piston'), ('wedge', 'Wedge'), ('other', 'Other')], max_length=50, verbose_name='Corer Method')),
                ('core_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Corer Method')),
                ('core_collect_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Depth (m)')),
                ('core_length', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Length (cm)')),
                ('core_diameter', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Diameter (cm)')),
                ('core_purpose', models.TextField(blank=True, verbose_name='Purpose of Other Cores')),
                ('core_notes', models.TextField(blank=True, verbose_name='Core Notes')),
                ('subcores_taken', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Sub-Cored')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Sediment Collection',
                'verbose_name_plural': 'Sediment Collections',
            },
        ),
        migrations.CreateModel(
            name='FieldSample',
            fields=[
                ('field_sample_barcode', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, primary_key=True, related_name='field_sample_barcode', serialize=False, to='sample_labels.samplebarcode')),
                ('barcode_slug', models.SlugField(max_length=16, verbose_name='Field Sample Barcode Slug')),
                ('sample_global_id', models.CharField(max_length=255, unique=True, verbose_name='Global ID')),
                ('is_extracted', models.CharField(choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], default='no', max_length=3, verbose_name='Extracted')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Field Sample Creation DateTime')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Field Sample Edit DateTime')),
                ('collection_global_id', models.ForeignKey(db_column='collection_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='field_samples', to='field_survey.fieldcollection')),
                ('record_creator', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='field_sample_record_creator', to=settings.AUTH_USER_MODEL, verbose_name='Field Sample Creator')),
                ('record_editor', models.ForeignKey(blank=True, null=True, on_delete=models.SET(utility.models.get_sentinel_user), related_name='field_sample_record_editor', to=settings.AUTH_USER_MODEL, verbose_name='Field Sample Editor')),
                ('sample_material', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='sample_labels.samplematerial')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Field Sample',
                'verbose_name_plural': 'Field Samples',
            },
        ),
        migrations.CreateModel(
            name='FilterSample',
            fields=[
                ('field_sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='filter_sample', primary_key=True, serialize=False, to='field_survey.fieldsample')),
                ('filter_location', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('in_field', 'Field'), ('in_lab', 'Lab')], max_length=50, verbose_name='Filter Location')),
                ('is_prefilter', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('no', 'No'), ('yes', 'Yes')], max_length=50, verbose_name='Prefilter')),
                ('filter_fname', models.CharField(blank=True, max_length=255, verbose_name='Filterer First Name')),
                ('filter_lname', models.CharField(blank=True, max_length=255, verbose_name='Filterer Last Name')),
                ('filter_sample_label', models.CharField(blank=True, max_length=255, verbose_name='Filter Sample Label')),
                ('filter_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Filter DateTime')),
                ('filter_method', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('vacuum', 'Vacuum'), ('gravity', 'Gravity'), ('peristaltic', 'Peristaltic'), ('other', 'Other')], max_length=50, verbose_name='Filter Method')),
                ('filter_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Filter Method')),
                ('filter_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Volume Filtered')),
                ('filter_type', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('nitex', 'Nitex'), ('gff', 'Glass Fiber Filter (GF/F)'), ('supor', 'Supor'), ('cn', 'Cellulose Nitrate (CN)'), ('other', 'Other')], max_length=50, verbose_name='Filter Type')),
                ('filter_type_other', models.CharField(blank=True, max_length=255, verbose_name='Other Filter Type')),
                ('filter_pore', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Filter Pore Size')),
                ('filter_size', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Filter Size')),
                ('filter_notes', models.TextField(blank=True, verbose_name='Filter Notes')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'Filter Sample',
                'verbose_name_plural': 'Filter Samples',
            },
        ),
        migrations.CreateModel(
            name='SubCoreSample',
            fields=[
                ('field_sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subcore_sample', primary_key=True, serialize=False, to='field_survey.fieldsample')),
                ('subcore_fname', models.CharField(blank=True, max_length=255, verbose_name='Sub-Corer First Name')),
                ('subcore_lname', models.CharField(blank=True, max_length=255, verbose_name='Sub-Corer Last Name')),
                ('subcore_method', models.CharField(blank=True, choices=[(None, '(Unknown)'), ('slices', 'Slices'), ('syringe', 'Syringe'), ('other', 'Other')], max_length=50, verbose_name='Sub-Core Method')),
                ('subcore_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Sub-Core Method')),
                ('subcore_datetime_start', models.DateTimeField(blank=True, null=True, verbose_name='Sub-Core DateTime Start')),
                ('subcore_datetime_end', models.DateTimeField(blank=True, null=True, verbose_name='Sub-Core DateTime End')),
                ('subcore_number', models.IntegerField(blank=True, null=True, verbose_name='Number of Sub-Cores')),
                ('subcore_length', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Sub-Core Length (cm)')),
                ('subcore_diameter', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Sub-Core Diameter (cm)')),
                ('subcore_clayer', models.IntegerField(blank=True, null=True, verbose_name='Sub-Core Consistency Layer')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'SubCore Sample',
                'verbose_name_plural': 'SubCore Samples',
            },
        ),
        migrations.CreateModel(
            name='FieldSurveyETL',
            fields=[
                ('survey_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('username', models.CharField(blank=True, max_length=255, verbose_name='Username')),
                ('survey_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Survey DateTime')),
                ('project_ids', models.CharField(blank=True, max_length=255, verbose_name='Affiliated Project(s)')),
                ('supervisor', models.CharField(blank=True, max_length=255, verbose_name='Supervisor')),
                ('recorder_fname', models.CharField(blank=True, max_length=255, verbose_name='Recorder First Name')),
                ('recorder_lname', models.CharField(blank=True, max_length=255, verbose_name='Recorder Last Name')),
                ('arrival_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Arrival DateTime')),
                ('site_id', models.CharField(blank=True, max_length=7, verbose_name='Site ID')),
                ('site_id_other', models.CharField(blank=True, max_length=255, verbose_name='Site ID - Other')),
                ('site_name', models.CharField(blank=True, max_length=255, verbose_name='General Location Name')),
                ('lat_manual', models.DecimalField(decimal_places=16, max_digits=22, verbose_name='Latitude (DD)')),
                ('long_manual', models.DecimalField(decimal_places=16, max_digits=22, verbose_name='Latitude (DD)')),
                ('env_obs_turbidity', models.CharField(blank=True, max_length=255, verbose_name='Water Turbidity')),
                ('env_obs_precip', models.CharField(blank=True, max_length=255, verbose_name='Precipitation')),
                ('env_obs_wind_speed', models.CharField(blank=True, max_length=255, verbose_name='Wind Speed')),
                ('env_obs_cloud_cover', models.CharField(blank=True, max_length=255, verbose_name='Cloud Cover')),
                ('env_biome', models.CharField(blank=True, max_length=255, verbose_name='Biome')),
                ('env_biome_other', models.CharField(blank=True, max_length=255, verbose_name='Other Biome')),
                ('env_feature', models.CharField(blank=True, max_length=255, verbose_name='Feature')),
                ('env_feature_other', models.CharField(blank=True, max_length=255, verbose_name='Other Feature')),
                ('env_material', models.CharField(blank=True, max_length=255, verbose_name='Material')),
                ('env_material_other', models.CharField(blank=True, max_length=255, verbose_name='Other Material')),
                ('env_notes', models.TextField(blank=True, verbose_name='Environmental Notes')),
                ('env_measure_mode', models.CharField(blank=True, max_length=255, verbose_name='Collection Mode')),
                ('env_boat_type', models.CharField(blank=True, max_length=255, verbose_name='Boat Type')),
                ('env_bottom_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Bottom Depth (m)')),
                ('measurements_taken', models.CharField(blank=True, max_length=3, verbose_name='Measurements Taken')),
                ('core_subcorer', models.CharField(blank=True, max_length=255, verbose_name='Designated Sub-corer')),
                ('water_filterer', models.CharField(blank=True, max_length=255, verbose_name='Designated Filterer')),
                ('survey_complete', models.CharField(blank=True, max_length=3, verbose_name='Survey Complete')),
                ('qa_editor', models.CharField(blank=True, max_length=255, verbose_name='Quality Editor')),
                ('qa_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Quality Check DateTime')),
                ('qa_initial', models.CharField(blank=True, max_length=200, verbose_name='Quality Check Initials')),
                ('gps_cap_lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Latitude (DD)')),
                ('gps_cap_long', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Longitude (DD)')),
                ('gps_cap_alt', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Altitude (m)')),
                ('gps_cap_horacc', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Horizontal Accuracy (m)')),
                ('gps_cap_vertacc', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='Captured Vertical Accuracy (m)')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_creator', models.CharField(blank=True, max_length=255, verbose_name='Record Creator')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('record_editor', models.CharField(blank=True, max_length=255, verbose_name='Record Editor')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Latitude, Longitude (DD WGS84)')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'FieldSurveyETL',
                'verbose_name_plural': 'FieldSurveyETLs',
            },
        ),
        migrations.CreateModel(
            name='FieldCrewETL',
            fields=[
                ('crew_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('crew_fname', models.CharField(blank=True, max_length=255, verbose_name='Crew First Name')),
                ('crew_lname', models.CharField(blank=True, max_length=255, verbose_name='Crew First Name')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_creator', models.CharField(blank=True, max_length=255, verbose_name='Record Creator')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('record_editor', models.CharField(blank=True, max_length=255, verbose_name='Record Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='fieldsurvey_to_fieldcrew_etl', to='field_survey.fieldsurveyetl')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'FieldCrewETL',
                'verbose_name_plural': 'FieldCrewETLs',
            },
        ),
        migrations.CreateModel(
            name='EnvMeasurementETL',
            fields=[
                ('env_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('env_measure_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Measurement DateTime')),
                ('env_measure_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Measurement Depth (m)')),
                ('env_instrument', models.TextField(blank=True, verbose_name='Instruments Used')),
                ('env_ctd_filename', models.CharField(blank=True, max_length=255, verbose_name='CTD File Name')),
                ('env_ctd_notes', models.TextField(blank=True, verbose_name='CTD Notes')),
                ('env_ysi_filename', models.CharField(blank=True, max_length=255, verbose_name='YSI File Name')),
                ('env_ysi_model', models.CharField(blank=True, max_length=255, verbose_name='YSI Model')),
                ('env_ysi_sn', models.CharField(blank=True, max_length=255, verbose_name='YSI Serial Number')),
                ('env_ysi_notes', models.TextField(blank=True, verbose_name='YSI Notes')),
                ('env_secchi_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Secchi Depth (m)')),
                ('env_secchi_notes', models.TextField(blank=True, verbose_name='Secchi Notes')),
                ('env_niskin_number', models.IntegerField(blank=True, null=True, verbose_name='Niskin Number')),
                ('env_niskin_notes', models.TextField(blank=True, verbose_name='Niskin Notes')),
                ('env_inst_other', models.TextField(blank=True, verbose_name='Other Instruments')),
                ('env_measurement', models.TextField(blank=True, verbose_name='Environmental Measurements')),
                ('env_flow_rate', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Flow Rate (m/s)')),
                ('env_water_temp', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Temperature (C)')),
                ('env_salinity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Salinity (PSU)')),
                ('env_ph_scale', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='pH Scale')),
                ('env_par1', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='PAR1 (Channel 1: Up μmoles/sec/m²)')),
                ('env_par2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='PAR2 (Channel 2: Down μmoles/sec/m²)')),
                ('env_turbidity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Turbidity FNU (Formazin Nephelometric Unit)')),
                ('env_conductivity', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Conductivity (μS/cm)')),
                ('env_do', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Dissolved Oxygen (mg/L)')),
                ('env_pheophytin', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Pheophytin (µg/L)')),
                ('env_chla', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Chlorophyll a (µg/L)')),
                ('env_no3no2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Nitrate and Nitrite (µM)')),
                ('env_no2', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Nitrite (µM)')),
                ('env_nh4', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Ammonium (µM)')),
                ('env_phosphate', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Phosphate (µM)')),
                ('env_substrate', models.CharField(blank=True, max_length=255, verbose_name='Bottom Substrate')),
                ('env_lab_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Lab DateTime')),
                ('env_measure_notes', models.TextField(blank=True, verbose_name='Measurement Notes')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_creator', models.CharField(blank=True, max_length=255, verbose_name='Record Creator')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('record_editor', models.CharField(blank=True, max_length=255, verbose_name='Record Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='fieldsurvey_to_envmeasurement_etl', to='field_survey.fieldsurveyetl')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'EnvMeasurementETL',
                'verbose_name_plural': 'EnvMeasurementETLs',
            },
        ),
        migrations.CreateModel(
            name='FieldCollectionETL',
            fields=[
                ('collection_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('collection_type', models.CharField(blank=True, max_length=255, verbose_name='Collection Type (water or sediment)')),
                ('water_control', models.CharField(blank=True, max_length=3, verbose_name='Is Control')),
                ('water_control_type', models.CharField(blank=True, max_length=255, verbose_name='Water Control Type')),
                ('water_vessel_label', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Label')),
                ('water_collect_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Water Collection DateTime')),
                ('water_collect_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Collection Depth')),
                ('water_collect_mode', models.CharField(blank=True, max_length=255, verbose_name='Collection Mode')),
                ('water_niskin_number', models.IntegerField(blank=True, null=True, verbose_name='Niskin Number')),
                ('water_niskin_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Niskin Sample Volume')),
                ('water_vessel_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Vessel Volume')),
                ('water_vessel_material', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Material')),
                ('water_vessel_color', models.CharField(blank=True, max_length=255, verbose_name='Water Vessel Color')),
                ('water_collect_notes', models.TextField(blank=True, verbose_name='Water Sample Notes')),
                ('was_filtered', models.CharField(blank=True, max_length=3, verbose_name='Filtered')),
                ('core_control', models.CharField(blank=True, max_length=3, verbose_name='Is Control')),
                ('core_label', models.CharField(blank=True, max_length=255, verbose_name='Core Label')),
                ('core_datetime_start', models.DateTimeField(blank=True, null=True, verbose_name='Core Start DateTime')),
                ('core_datetime_end', models.DateTimeField(blank=True, null=True, verbose_name='Core End DateTime')),
                ('core_method', models.CharField(blank=True, max_length=255, verbose_name='Corer Method')),
                ('core_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Corer Method')),
                ('core_collect_depth', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Depth (m)')),
                ('core_length', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Length (cm)')),
                ('core_diameter', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Core Diameter (cm)')),
                ('subcores_taken', models.CharField(blank=True, max_length=3, verbose_name='Sub-Cored')),
                ('subcore_fname', models.CharField(blank=True, max_length=255, verbose_name='Sub-Corer First Name')),
                ('subcore_lname', models.CharField(blank=True, max_length=255, verbose_name='Sub-Corer Last Name')),
                ('subcore_method', models.CharField(blank=True, max_length=255, verbose_name='Sub-Core Method')),
                ('subcore_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Sub-Core Method')),
                ('subcore_datetime_start', models.DateTimeField(blank=True, null=True, verbose_name='Sub-Core DateTime Start')),
                ('subcore_datetime_end', models.DateTimeField(blank=True, null=True, verbose_name='Sub-Core DateTime End')),
                ('subcore_min_barcode', models.CharField(blank=True, max_length=16, verbose_name='Min Sub-Core Barcode')),
                ('subcore_max_barcode', models.CharField(blank=True, max_length=16, verbose_name='Max Sub-Core Barcode')),
                ('subcore_number', models.IntegerField(blank=True, null=True, verbose_name='Number of Sub-Cores')),
                ('subcore_length', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Sub-Core Length (cm)')),
                ('subcore_diameter', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Sub-Core Diameter (cm)')),
                ('subcore_clayer', models.IntegerField(blank=True, null=True, verbose_name='Sub-Core Consistency Layer')),
                ('core_purpose', models.TextField(blank=True, verbose_name='Purpose of Other Cores')),
                ('core_notes', models.TextField(blank=True, verbose_name='Core Notes')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_creator', models.CharField(blank=True, max_length=255, verbose_name='Record Creator')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('record_editor', models.CharField(blank=True, max_length=255, verbose_name='Record Editor')),
                ('survey_global_id', models.ForeignKey(db_column='survey_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='fieldsurvey_to_fieldcollection_etl', to='field_survey.fieldsurveyetl')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'FieldCollectionETL',
                'verbose_name_plural': 'FieldCollectionETLs',
            },
        ),
        migrations.CreateModel(
            name='SampleFilterETL',
            fields=[
                ('filter_global_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Global ID')),
                ('filter_location', models.CharField(blank=True, max_length=255, verbose_name='Filter Location')),
                ('is_prefilter', models.CharField(blank=True, max_length=3, verbose_name='Prefilter')),
                ('filter_fname', models.CharField(blank=True, max_length=255, verbose_name='Filterer First Name')),
                ('filter_lname', models.CharField(blank=True, max_length=255, verbose_name='Filterer Last Name')),
                ('filter_sample_label', models.CharField(blank=True, max_length=255, verbose_name='Filter Sample Label')),
                ('filter_barcode', models.CharField(blank=True, max_length=16, verbose_name='Filter Sample Barcode')),
                ('filter_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Filter DateTime')),
                ('filter_method', models.CharField(blank=True, max_length=255, verbose_name='Filter Method')),
                ('filter_method_other', models.CharField(blank=True, max_length=255, verbose_name='Other Filter Method')),
                ('filter_vol', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Water Volume Filtered')),
                ('filter_type', models.CharField(blank=True, max_length=255, verbose_name='Filter Type')),
                ('filter_type_other', models.CharField(blank=True, max_length=255, verbose_name='Other Filter Type')),
                ('filter_pore', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Filter Pore Size')),
                ('filter_size', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True, verbose_name='Filter Size')),
                ('filter_notes', models.TextField(blank=True, verbose_name='Filter Notes')),
                ('record_create_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Creation DateTime')),
                ('record_creator', models.CharField(blank=True, max_length=255, verbose_name='Record Creator')),
                ('record_edit_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Record Edit DateTime')),
                ('record_editor', models.CharField(blank=True, max_length=255, verbose_name='Record Editor')),
                ('collection_global_id', models.ForeignKey(db_column='collection_global_id', on_delete=django.db.models.deletion.CASCADE, related_name='fieldcollection_to_samplefilter_etl', to='field_survey.fieldcollectionetl')),
                ('created_by', models.ForeignKey(default=utility.models.get_default_user, on_delete=models.SET(utility.models.get_sentinel_user), to=settings.AUTH_USER_MODEL)),
                ('modified_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Modified DateTime')),
                ('created_datetime', models.DateTimeField(auto_now=True, verbose_name='Created DateTime')),
            ],
            options={
                'verbose_name': 'SampleFilterETL',
                'verbose_name_plural': 'SampleFilterETLs',
            },
        ),
    ]
